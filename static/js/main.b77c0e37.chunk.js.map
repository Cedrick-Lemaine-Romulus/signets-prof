{"version":3,"sources":["composants/Entete.jsx","composants/Dossier.jsx","firebase.js","composants/ListeDossiers.jsx","composants/Accueil.jsx","composants/AjouterDossier.jsx","composants/Appli.jsx","index.jsx"],"names":["Entete","utilisateur","className","Button","variant","size","onClick","firebase","auth","signOut","displayName","Avatar","alt","src","photoURL","Dossier","id","nom","couleur","datemodif","couverture","style","backgroundColor","IconButton","aria-label","disableRipple","formaterDate","d","dateJs","Date","seconds","jour","getDate","mois","getMonth","getFullYear","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","instanceFirebaseUI","firebaseui","AuthUI","firestore","ListeDossiers","etatDossiers","dossiers","setDossiers","useEffect","a","tabDossiers","collection","doc","uid","get","forEach","console","log","push","data","chercherDossiers","map","dossier","Accueil","start","signInOptions","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","GithubAuthProvider","signInFlow","AjouterDossier","ouvert","setOuvert","gererAjout","useState","setNom","setCouverture","setCouleur","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","onChange","e","target","value","width","triangle","onChangeComplete","hex","DialogActions","color","Appli","setUtilisateur","onAuthStateChanged","util","set","courriel","email","datecompte","FieldValue","serverTimestamp","merge","objDossier","add","then","refDoc","Fab","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b77c0e37.chunk.js","sourcesContent":["import './Entete.scss';\nimport { Avatar } from '@material-ui/core'; \nimport Button from '@material-ui/core/Button';\nimport firebase from 'firebase/app';\n\nexport default function Entete({utilisateur}) {\n  return (\n    <header className=\"Entete\">\n      <div className=\"logo\">\n        Signets\n        <Button \n          variant=\"outlined\"\n          size=\"small\"\n          className=\"btn-deconnexion\"\n          onClick={() => firebase.auth().signOut()}\n        >\n          Déconnexion\n        </Button>\n      </div>\n      <div className=\"utilisateur\">{utilisateur.displayName} <Avatar className=\"avatar\" alt={utilisateur.displayName} src={utilisateur.photoURL} /></div>\n    </header>\n  );\n}","import './Dossier.scss'; \nimport { IconButton } from '@material-ui/core';\nimport SortIcon from '@material-ui/icons/Sort';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nexport default function Dossier({id, nom, couleur, datemodif, couverture}) {\n  return (\n    <article className=\"Dossier\" style={{backgroundColor: couleur}}>\n      <div className=\"couverture\">\n        <IconButton className=\"deplacer\" aria-label=\"déplacer\" disableRipple={true}>\n          <SortIcon />\n        </IconButton>\n        <img src={couverture} alt={nom}/>\n      </div>\n      <div className=\"info\">\n        <h2>{nom}</h2>\n        <p>Modifié : {formaterDate(datemodif)}</p>\n      </div>\n      <IconButton className=\"modifier\" aria-label=\"modifier\" size=\"small\">\n        <MoreVertIcon />\n      </IconButton>\n    </article>\n  );\n}\n\n/**\n * Formate les objets date de Firestore et retourne une chaîne de caractères\n * @param {Object} d Objet date de firestore\n * @returns String date formatée en français\n */\nfunction formaterDate(d) {\n  //console.log(\"Objet retourné par Firestore pour le champ datemodif de type timestamp : \", d);\n  const nomsDesMois = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'];\n  const dateJs = new Date(d.seconds*1000);\n  const jour = dateJs.getDate(); // un nombre entre 1 et 31\n  const mois = dateJs.getMonth(); // un nombe entre 0 (jan) et 11 (déc)\n\n  return `${jour} ${nomsDesMois[mois]} ${dateJs.getFullYear()}`;\n}","import firebase from 'firebase/app';\nimport * as firebaseui from 'firebaseui';\nimport 'firebase/firestore';\n\n// Configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBDOzSQ32IppQYoxoorH5G7jByzBTuZLeE\",\n  authDomain: \"clr-react.firebaseapp.com\",\n  projectId: \"clr-react\",\n  storageBucket: \"clr-react.appspot.com\",\n  messagingSenderId: \"985665399748\",\n  appId: \"1:985665399748:web:ef2120093c846b47bf9291\",\n  measurementId: \"G-ZJKSJ920JE\"\n};\n\n// Initialiser Firebase\nif(!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\n// Initialiser FirebaseUI\nexport const instanceFirebaseUI = new firebaseui.auth.AuthUI(firebase.auth());\n\n// Initialiser Firestore\nexport const firestore = firebase.firestore();\n","import './ListeDossiers.scss';\nimport Dossier from './Dossier';\nimport { firestore } from '../firebase';\nimport { useEffect, useState } from 'react';\n\nexport default function ListeDossiers({utilisateur, etatDossiers}) {\n  const [dossiers, setDossiers] = etatDossiers;\n\n  // On va chercher les données sur Firestore et raffraichir le composant.\n  // 3 méthodes sont expliquées pour faire la même chose\n  // Première méthode : en utilisant la syntaxe async/await \n  // (ce qui nous oblige d'écrire une fonction à l'intérieur de useEffect())\n  useEffect(\n    () => {\n      // On crée une fonction asynchrone pour pouvoir utiliser la syntaxe await sur les requêtes asynchrones à Firestore\n      async function chercherDossiers() {\n        // Tableau qui va recevoir nos dossiers de Firestore\n        const tabDossiers = [];\n        // La requête à Firestore utilise 'await' pour retourner la réponse\n        const reponse = await  firestore .collection('utilisateurs').doc(utilisateur.uid).collection('dossiers').get();\n        // On traverse la réponse ...\n        reponse.forEach(\n          // ... et pour chaque doc dans la réponse on ajoute un objet dans tabDossiers\n          doc => {\n            console.log(\"Le doc retourné par Firestore : \", doc);\n            tabDossiers.push({id: doc.id, ...doc.data()})\n          }\n          // Remarquez que le 'id' ne fait pas partie des attributs de données des documents sur Firestore, et il faut l'extraire séparément avec la propriété 'id'. Remarquez aussi l'utilisation de l'opérateur de décomposition (spread operator (...))\n        );\n        // Une fois notre réponse traitée au complet et le tableau tabDossiers renpli avec tous les objets représentants les documents 'dossiers' trouvés, nous pouvons faire la mutation de l'état de la variable 'dossiers' (en utilisant le mutateur setDossiers) pour forcer un 'rerender' (réaffichage) du composant par React\n        setDossiers(tabDossiers);\n      }\n      // Faut pas oublier d'appeler la fonction\n      chercherDossiers();\n    }, []\n  );\n\n  // Autre méthode (utilisant \"then()\" au lieu de \"async/await\")\n  /*\n  useEffect(\n    () => {\n      function chercherDossiers() {\n        const tabDossiers = [];\n         firestore .collection('utilisateurs').doc(utilisateur.uid).collection('dossiers').get().then(\n          reponse => {\n            reponse.forEach(doc => tabDossiers.push({id: doc.id, ...doc.data()}));\n            setDossiers(tabDossiers);\n          });\n      }\n      chercherDossiers();\n    },[]\n  );\n  */\n  \n  // Autre méthode (utilisant \"then()\" encore une fois, mais cette fois-ci sans la fonction interne qui est superflue)\n  /*\n  useEffect(\n    () => {\n      const tabDossiers = [];\n       firestore .collection('utilisateurs').doc(utilisateur.uid).collection('dossiers').get().then(\n        reponse => {\n          reponse.forEach(doc => tabDossiers.push({id: doc.id, ...doc.data()}));\n          setDossiers(tabDossiers);\n        });\n    },[]\n  );\n  */\n\n  \n  return (\n    <ul className=\"ListeDossiers\">\n      {\n        dossiers.map( \n          dossier =>  <li key={dossier.id}><Dossier {...dossier} /></li>\n        )\n      }\n    </ul>\n  );\n}","import './Accueil.scss';\nimport firebase from 'firebase/app';\nimport { instanceFirebaseUI } from '../firebase';\nimport 'firebaseui/dist/firebaseui.css';\nimport { useEffect } from 'react';\n\nexport default function Accueil() {\n  useEffect(\n    () => instanceFirebaseUI.start(\"#firebaseui-widget\", {\n      signInOptions: [\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n        firebase.auth.GithubAuthProvider.PROVIDER_ID\n      ],\n      signInFlow: 'popup'\n    }, [])\n  )\n\n  return (\n    <div className=\"Accueil\">\n      <h3 className=\"logo\">Signets <span>beta</span></h3>\n      <h2 className=\"amorce\">Organisez vos signets Web, <br />Simple comme bonjour !</h2>\n      <h4 className=\"connexion-etiquette\">Connexion à Signets</h4>\n      <div id=\"firebaseui-widget\"></div>\n    </div>\n  )\n}","import Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useState } from 'react';\nimport { TwitterPicker } from 'react-color';\n\nexport default function AjouterDossier({ouvert, setOuvert, gererAjout}) {\n  const [nom, setNom] = useState('Blablabla');\n  const [couverture, setCouverture] = useState('Patati');\n  const [couleur, setCouleur] = useState('#090');\n\n  return (\n    <div className=\"AjouterDossier\">\n      <Dialog open={ouvert} onClose={()=>setOuvert(false)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Ajouter un dossier</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"nomDossier\"\n            label=\"Nom du dossier\"\n            type=\"text\"\n            fullWidth\n            onChange={(e) => setNom(e.target.value)}\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"urlImage\"\n            label=\"Adresse de l'image de couverture\"\n            type=\"text\"\n            fullWidth\n            onChange={(e) => setCouverture(e.target.value)}\n          />\n          <TwitterPicker \n            width=\"100%\" \n            triangle=\"hide\" \n            onChangeComplete={(couleur, e) => setCouleur(couleur.hex)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={()=>setOuvert(false)} color=\"primary\">\n            Annuler\n          </Button>\n          <Button onClick={() => gererAjout(nom, couverture, couleur)} color=\"primary\">\n            Ajouter\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import './Appli.scss';\nimport Entete from './Entete';\nimport ListeDossiers from './ListeDossiers';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Accueil from './Accueil';\nimport { useEffect, useState } from 'react';\nimport firebase from 'firebase/app';\nimport {firestore} from '../firebase';\nimport AjouterDossier from './AjouterDossier';\n\nexport default function Appli() {\n  const [utilisateur, setUtilisateur] = useState(null);\n  const etatDossiers = useState([]);\n  const [dossiers, setDossiers] = etatDossiers;\n\n  useEffect(\n    () => {\n     firebase.auth().onAuthStateChanged(\n       util => {\n        setUtilisateur(util);\n        // Créer le profil de l'utilisateur dans Firestore si util n'est pas NULL\n        if(util) {\n          firestore.collection('utilisateurs').doc(util.uid).set({\n            nom: util.displayName, \n            courriel: util.email, \n            datecompte: firebase.firestore.FieldValue.serverTimestamp()\n          }, {merge: true});\n        }\n      }\n     );\n    }, []\n  );\n\n  // Gestion de la boîte de dialogue \"Ajout Dossier\"\n  const [ouvert, setOuvert] = useState(false);\n  \n  function gererAjout(nom, couverture, couleur) {\n    // Ajouter le dossier dans Firestore\n    console.log(\"Les 3 paramètres de AjouterDossier : \", nom,couverture,couleur);\n    const objDossier = {\n      nom: nom,\n      couverture: couverture,\n      couleur: couleur,\n      datemodif: firebase.firestore.FieldValue.serverTimestamp()\n    };\n    firestore.collection('utilisateurs').doc(utilisateur.uid).collection('dossiers').add(objDossier).then(\n      refDoc => {\n        setOuvert(false);\n        refDoc.get().then(\n          doc => setDossiers([...dossiers, {...doc.data(), id: doc.id}])\n        )\n      }\n    )\n\n    // Raffraîchir l'état de la variable \"dossiers\"\n    //setDossiers([...dossiers, objDossier]);\n\n    // Puis fermer la boîte de dialogue\n    \n  }\n\n  return (\n    <div className=\"Appli\">\n      {\n        utilisateur ?\n          <>\n            <Entete utilisateur={utilisateur} />\n            <section className=\"contenu-principal\">\n              <ListeDossiers utilisateur={utilisateur} etatDossiers={etatDossiers} />\n              <AjouterDossier ouvert={ouvert} setOuvert={setOuvert} gererAjout={gererAjout} />\n              <Fab onClick={() => setOuvert(true)} className=\"ajoutRessource\" color=\"primary\" aria-label=\"Ajouter dossier\">\n                <AddIcon />\n              </Fab>\n            </section>\n          </>\n        :\n          <Accueil />\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Appli from './composants/Appli';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Appli />\n  </React.StrictMode>,\n  document.getElementById('racine')\n);\n"],"sourceRoot":""}